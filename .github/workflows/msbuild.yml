name: MSBuild

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug

jobs:
  build:
    runs-on: windows-latest
    if: false # always skip job

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} "/p:OutputPath=artifact"

    - name: Publish Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Build Artifacts
        path: CompuMaster.Calendar/artifact

    - name: Publish NUnit Test Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: NUnit Tests
        path: CompuMaster.Test.Calendar/artifact

  test:
    needs: build
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include: 
          - os: macos-latest
            runNetExe: mono

    # the build-and-test job might be skipped, we don't need to run this job then
    #if: success() || failure()

    env:
      RESULTS_PATH: TestResult.JUnit.xml

    steps:
      - name: JIT-Install MS.VisualBasic
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get install libmono-microsoft-visualbasic10.0-cil

      - name: Install NUnit.ConsoleRunner
        shell: pwsh
        run: nuget install NUnit.ConsoleRunner -Version 3.12.0

      - name: Download JUnit Xslt
        run: curl https://raw.githubusercontent.com/jochenwezel/nunit-transforms-to-junit-gitlab-compatible/master/nunit3-junit/nunit3-junit.xslt > nunit3-junit.xslt

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: NUnit Tests

      - name: Run Unit Tests
        run: ${{ matrix.runNetExe }} ./NUnit.ConsoleRunner.3.12.0/tools/nunit3-console.exe CompuMaster.Test.Calendar.dll --result=TestResult.xml "--result=TestResult.JUnit.xml;transform=nunit3-junit.xslt"

      - name: Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        # the action is useless on pull_request events
        # (it can not create check runs or pull request comments)
        if: always() && startsWith(matrix.os, 'ubuntu') && github.event_name != 'pull_request'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: "TestResult.JUnit.xml"
          check_run_annotations: all tests
          comment_title: Unit Test Statistics
          check_name: Unit Test Results
          report_individual_runs: true

      - name: Publish Unit Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: NUnit Test Results ${{ matrix.os }}
          path: TestResult.JUnit.xml

#      - name: Generate Report
#        id: xunit-viewer
#        uses: ./  #use the current project relative to root
#        with:
#          results: ${{ env.RESULTS_PATH }}
#
#      - name: The generated report
#        run: echo "The report is ${{ steps.xunit-viewer.outputs.report-file }}"    
#
#      - name: Test
#        run: |
#            [ ${{ steps.xunit-viewer.outputs.report-file }} == "${{ env.RESULTS_PATH }}/index.html" ]
#
#      - name: Attach the report
#        if: always()
#        uses: actions/upload-artifact@v1
#        with:
#          name: alternate-results-path-reports
#          path: ${{ steps.xunit-viewer.outputs.report-dir }}

#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        run: Publish Unit Test Results

#      - name: Upload Unit Test Results
#        if: always()
#        uses: actions/upload-artifact@v2
#        with:
#          name: Unit Test Results (Python ${{ matrix.python-version }})
#          path: pytest.xml

  release:
    runs-on: ubuntu-latest
    name: Release if all tests pass on master branch
#    needs:
#      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
#          body: |
#            Changes in this Release
#            - First Change
#            - Second Change
          draft: true
          prerelease: false

  publish:
    name: Publish to NuGet gallery
    # PLEASE NOTE: Project gets published only if there's a NUGET_KEY configured in the repository
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v2

      # - name: Setup dotnet
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: 3.1.200

      # Publish
      - name: publish on version change
        id: publish_nuget
        uses: rohith/publish-nuget@v2
        with:
          # Filepath of the project to be packaged, relative to root of repository
          PROJECT_FILE_PATH: Core/Core.csproj
          
          # NuGet package id, used for version detection & defaults to project name
          # PACKAGE_NAME: Core
          
          # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH
          # VERSION_FILE_PATH: Directory.Build.props

          # Regex pattern to extract version info in a capturing group
          # VERSION_REGEX: ^\s*<Version>(.*)<\/Version>\s*$
          
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX
          # VERSION_STATIC: 1.0.0

          # Flag to toggle git tagging, enabled by default
          # TAG_COMMIT: true

          # Format of the git tag, [*] gets replaced with actual version
          # TAG_FORMAT: v*

          # API key to authenticate with NuGet server
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}}

          # NuGet server uri hosting the packages, defaults to https://api.nuget.org
          # NUGET_SOURCE: https://api.nuget.org

          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default
          # INCLUDE_SYMBOLS: false